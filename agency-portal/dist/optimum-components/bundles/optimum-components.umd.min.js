!function(o,n){"object"==typeof exports&&"undefined"!=typeof module?n(exports,require("@angular/core"),require("@angular/forms"),require("@angular/common")):"function"==typeof define&&define.amd?define("optimum-components",["exports","@angular/core","@angular/forms","@angular/common"],n):n((o=o||self)["optimum-components"]={},o.ng.core,o.ng.forms,o.ng.common)}(this,function(o,n,t,r){"use strict";var e=function(){function o(){}return o.decorators=[{type:n.Injectable,args:[{providedIn:"root"}]}],o.ctorParameters=function(){return[]},o.ngInjectableDef=n.ɵɵdefineInjectable({factory:function(){return new o},token:o,providedIn:"root"}),o}(),i=function(){function o(){}return o.prototype.ngOnInit=function(){},o.decorators=[{type:n.Component,args:[{selector:"optimum-optimum-components",template:"\n    <p>\n      optimum-components works!\n    </p>\n  "}]}],o.ctorParameters=function(){return[]},o}(),u=function(){function o(o){this.fb=o,this.debug=!0,this.submitted=!1}return o.prototype.ngOnInit=function(){},o.prototype.onSubmit=function(){this.submitted=!0},o.decorators=[{type:n.Component,args:[{selector:"optimum-text-area-input",template:'<div class="container">\n    <div *ngIf="debug==true">\n      <h4> Optimum-text-area-input component</h4>\n    </div>\n    <form [formGroup]="profileForm" novalidate>\n      <div class="form-group">\n        <label for="textAreaInput"> {{labelName}}:\n          <textarea class="form-control" id="textAreaInput" [(ngModel)]="userProfileModel.textAreaInput"\n            formControlName="textAreaInput"> </textarea>\n        </label>\n        <div *ngIf="debug==true">\n          <br>\n          DEBUG: model.textInput content: {{userProfileModel.textInput}}\n          <br>\n          DEBUG: profileForm status: {{profileForm.status}}\n          <br>\n          DEBUG: profileForm dirty: {{profileForm.dirty}}\n          <br>\n          DEBUG: profileForm touched: {{profileForm.touched}}\n          <br>\n          DEBUG: model content: {{ userProfileModel | json }}\n          <br>\n        </div>\n        <div\n          *ngIf="profileForm.controls[\'textAreaInput\'].invalid && (profileForm.controls[\'textAreaInput\'].dirty || profileForm.controls[\'textAreaInput\'].touched)"\n          class="alert alert-danger">\n          <div *ngIf="profileForm.controls[\'textAreaInput\'].errors.required">\n            This is required.\n          </div>\n          <div *ngIf="profileForm.controls[\'textAreaInput\'].invalid">\n            Error in input.\n          </div>\n        </div>\n      </div>\n      <button type="submit" class="btn btn-success" onclick="onSubmit()">Submit</button>\n  \n    </form>\n  </div>',styles:["input.ng-invalid.ng-touched  {border: 2px solid #a94442; /* red */ }"]}]}],o.ctorParameters=function(){return[{type:t.FormBuilder}]},o.propDecorators={labelName:[{type:n.Input}],userProfileModel:[{type:n.Input}],profileForm:[{type:n.Input}]},o}(),l=function(){function o(o){this.fb=o,this.debug=!0,this.submitted=!1}return o.prototype.ngOnInit=function(){},o.prototype.onSubmit=function(){this.submitted=!0},o.decorators=[{type:n.Component,args:[{selector:"optimum-text-input",template:'<div class="container">\n  <div *ngIf="debug==true">\n    <h4> Optimum-text-input component</h4>\n  </div>\n  <form [formGroup]="profileForm" novalidate>\n    <div class="form-group">\n      <label for="textInput"> {{labelName}}:\n        <input type="text" class="form-control" id="textInput" [(ngModel)]="userProfileModel.textInput"\n          formControlName="textInput">\n      </label>\n      <div *ngIf="debug==true">\n        <br>\n        DEBUG: model.textInput content: {{userProfileModel.textInput}}\n        <br>\n        DEBUG: profileForm status: {{profileForm.status}}\n        <br>\n        DEBUG: profileForm dirty: {{profileForm.dirty}}\n        <br>\n        DEBUG: profileForm touched: {{profileForm.touched}}\n        <br>\n        DEBUG: model content: {{ userProfileModel | json }}\n        <br>\n      </div>\n      <div\n        *ngIf="profileForm.controls[\'textInput\'].invalid && (profileForm.controls[\'textInput\'].dirty || profileForm.controls[\'textInput\'].touched)"\n        class="alert alert-danger">\n        <div *ngIf="profileForm.controls[\'textInput\'].errors.required">\n          This is required.\n        </div>\n        <div *ngIf="profileForm.controls[\'textInput\'].invalid">\n          Error in input.\n        </div>\n      </div>\n    </div>\n    <button type="submit" class="btn btn-success" onclick="onSubmit()">Submit</button>\n\n  </form>\n</div>',styles:["input.ng-invalid.ng-touched  {border: 2px solid #a94442; /* red */ }"]}]}],o.ctorParameters=function(){return[{type:t.FormBuilder}]},o.propDecorators={labelName:[{type:n.Input}],userProfileModel:[{type:n.Input}],profileForm:[{type:n.Input}]},o}(),p=function(){function o(o){this.fb=o,this.debug=!1,this.submitted=!1}return o.prototype.ngOnInit=function(){},o.prototype.onSubmit=function(){this.submitted=!0},o.decorators=[{type:n.Component,args:[{selector:"optimum-phone-input",template:'<div class="container">\n    <div *ngIf="debug==true">\n      <h4> Optimum-phone-input component</h4>\n    </div>\n    <form [formGroup]="profileForm" novalidate>\n      <div class="form-group">\n        <label for="phone"> {{labelName}}: XXX-XXX-XXXX\n          <input  type="tel" class="form-control" id="phone" [(ngModel)]="userProfileModel.phone"\n            formControlName="phone" pattern="[0-9]{3}-[0-9]{3}-[0-9]{4}" >\n        </label>\n        <div *ngIf="debug==true">\n          <br>\n          DEBUG: model.textInput content: {{userProfileModel.textInput}}\n          <br>\n          DEBUG: profileForm status: {{profileForm.status}}\n          <br>\n          DEBUG: profileForm dirty: {{profileForm.dirty}}\n          <br>\n          DEBUG: profileForm touched: {{profileForm.touched}}\n          <br>\n          DEBUG: model content: {{ userProfileModel | json }}\n          <br>\n        </div>\n        <div\n          *ngIf="profileForm.controls[\'phone\'].invalid && (profileForm.controls[\'phone\'].dirty || profileForm.controls[\'phone\'].touched)"\n          class="alert alert-danger">\n          <div *ngIf="profileForm.controls[\'phone\'].errors.required">\n            This is required.\n          </div>\n          <div *ngIf="profileForm.controls[\'phone\'].invalid">\n            Error in input.\n          </div>\n        </div>\n      </div>\n      <button type="submit" class="btn btn-success" onclick="onSubmit()">Submit</button>\n  \n    </form>\n  </div>',styles:["input.ng-invalid.ng-touched  {border: 2px solid #a94442; /* red */ }"]}]}],o.ctorParameters=function(){return[{type:t.FormBuilder}]},o.propDecorators={labelName:[{type:n.Input}],userProfileModel:[{type:n.Input}],profileForm:[{type:n.Input}]},o}(),d=function(){function o(o){this.fb=o,this.debug=!0,this.submitted=!1}return o.prototype.ngOnInit=function(){},o.prototype.onSubmit=function(){this.submitted=!0},o.decorators=[{type:n.Component,args:[{selector:"optimum-radio-input",template:'<div class="container">\n  <div *ngIf="debug==true">\n    <h4> Optimum-radio-input component</h4>\n  </div>\n  <form [formGroup]="profileForm" #f="ngForm" (ngSubmit)="onSubmit()"  novalidate>\n    <div class="form-group">\n      <label for="radio"> {{labelName}}:\n      </label>\n\n      <div *ngFor="let choice of radioChoices" >\n      <input type="radio" class="form-control" id="radio"\n        [(ngModel)]="userProfileModel.radio" formControlName="radio" [value]="choice"> {{choice}}\n      </div>\n      <div *ngIf="debug==true">\n        <br>\n        DEBUG: model.textInput content: {{userProfileModel.textInput}}\n        <br>\n        DEBUG: profileForm status: {{profileForm.status}}\n        <br>\n        DEBUG: profileForm dirty: {{profileForm.dirty}}\n        <br>\n        DEBUG: profileForm touched: {{profileForm.touched}}\n        <br>\n        DEBUG: model content: {{ userProfileModel | json }}\n        <br>\n      </div>\n      <div\n        *ngIf="profileForm.controls[\'radio\'].invalid && (profileForm.controls[\'radio\'].dirty || profileForm.controls[\'radio\'].touched)"\n        class="alert alert-danger">\n        <div *ngIf="profileForm.controls[\'radio\'].errors.required">\n          This is required.\n        </div>\n        <div *ngIf="profileForm.controls[\'radio\'].invalid">\n          Error in input.\n        </div>\n      </div>\n    </div>\n    <button type="submit" class="btn btn-success">Submit</button>\n  </form >\n\n</div>',styles:["input.ng-invalid.ng-touched  {border: 2px solid #a94442; /* red */ }"]}]}],o.ctorParameters=function(){return[{type:t.FormBuilder}]},o.propDecorators={labelName:[{type:n.Input}],radioChoices:[{type:n.Input}],userProfileModel:[{type:n.Input}],profileForm:[{type:n.Input}]},o}(),s=function(){function o(o){this.fb=o,this.debug=!0,this.submitted=!1}return o.prototype.ngOnInit=function(){},o.prototype.onSubmit=function(){this.submitted=!0},o.decorators=[{type:n.Component,args:[{selector:"optimum-dropdown-input",template:'<div class="container">\n    <div *ngIf="debug==true">\n      <h4> Optimum-dropdown-input component</h4>\n    </div>\n    <form [formGroup]="profileForm" #f="ngForm" (ngSubmit)="onSubmit()"  novalidate>\n      <div class="form-group">\n        <label for="dropdown"> {{labelName}}:\n        </label>\n        <select  id="dropdown" class="form-control" [(ngModel)]="userProfileModel.dropdown" formControlName="dropdown" >\n        <option *ngFor="let choice of dropdownChoices" [ngValue]="choice"> {{choice}} </option>\n        </select>\n        <div *ngIf="debug==true">\n          <br>\n          DEBUG: model.textInput content: {{userProfileModel.textInput}}\n          <br>\n          DEBUG: profileForm status: {{profileForm.status}}\n          <br>\n          DEBUG: profileForm dirty: {{profileForm.dirty}}\n          <br>\n          DEBUG: profileForm touched: {{profileForm.touched}}\n          <br>\n          DEBUG: model content: {{ userProfileModel | json }}\n          <br>\n        </div>\n        <div\n          *ngIf="profileForm.controls[\'dropdown\'].invalid && (profileForm.controls[\'dropdown\'].dirty || profileForm.controls[\'dropdown\'].touched)"\n          class="alert alert-danger">\n          <div *ngIf="profileForm.controls[\'dropdown\'].errors.required">\n            This is required.\n          </div>\n          <div *ngIf="profileForm.controls[\'dropdown\'].invalid">\n            Error in input.\n          </div>\n        </div>\n      </div>\n      <button type="submit" class="btn btn-success">Submit</button>\n    </form >\n  \n  </div>',styles:["input.ng-invalid.ng-touched  {border: 2px solid #a94442; /* red */ }"]}]}],o.ctorParameters=function(){return[{type:t.FormBuilder}]},o.propDecorators={labelName:[{type:n.Input}],dropdownChoices:[{type:n.Input}],userProfileModel:[{type:n.Input}],profileForm:[{type:n.Input}]},o}(),m=function(){function o(){}return o.decorators=[{type:n.NgModule,args:[{declarations:[i,u,l,p,d,s],imports:[t.FormsModule,r.CommonModule,t.ReactiveFormsModule],exports:[i,u,l,p,d,s]}]}],o}();o.OptimumComponentsComponent=i,o.OptimumComponentsModule=m,o.OptimumComponentsService=e,o.ɵa=u,o.ɵb=l,o.ɵc=p,o.ɵd=d,o.ɵe=s,Object.defineProperty(o,"__esModule",{value:!0})});
//# sourceMappingURL=optimum-components.umd.min.js.map